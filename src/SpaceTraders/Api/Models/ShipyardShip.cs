// <auto-generated/>
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace SpaceTraders.Api.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.17.0")]
    #pragma warning disable CS1591
    public partial class ShipyardShip : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>The activity level of a trade good. If the good is an import, this represents how strong consumption is. If the good is an export, this represents how strong the production is for the good. When activity is strong, consumption or production is near maximum capacity. When activity is weak, consumption or production is near minimum capacity.</summary>
        public global::SpaceTraders.Api.Models.ActivityLevel? Activity { get; set; }
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The crew property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::SpaceTraders.Api.Models.ShipyardShip_crew? Crew { get; set; }
#nullable restore
#else
        public global::SpaceTraders.Api.Models.ShipyardShip_crew Crew { get; set; }
#endif
        /// <summary>The description property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Description { get; set; }
#nullable restore
#else
        public string Description { get; set; }
#endif
        /// <summary>The engine determines how quickly a ship travels between waypoints.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::SpaceTraders.Api.Models.ShipEngine? Engine { get; set; }
#nullable restore
#else
        public global::SpaceTraders.Api.Models.ShipEngine Engine { get; set; }
#endif
        /// <summary>The frame of the ship. The frame determines the number of modules and mounting points of the ship, as well as base fuel capacity. As the condition of the frame takes more wear, the ship will become more sluggish and less maneuverable.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::SpaceTraders.Api.Models.ShipFrame? Frame { get; set; }
#nullable restore
#else
        public global::SpaceTraders.Api.Models.ShipFrame Frame { get; set; }
#endif
        /// <summary>The modules property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::SpaceTraders.Api.Models.ShipModule>? Modules { get; set; }
#nullable restore
#else
        public List<global::SpaceTraders.Api.Models.ShipModule> Modules { get; set; }
#endif
        /// <summary>The mounts property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::SpaceTraders.Api.Models.ShipMount>? Mounts { get; set; }
#nullable restore
#else
        public List<global::SpaceTraders.Api.Models.ShipMount> Mounts { get; set; }
#endif
        /// <summary>The name property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>The purchasePrice property</summary>
        public int? PurchasePrice { get; set; }
        /// <summary>The reactor of the ship. The reactor is responsible for powering the ship&apos;s systems and weapons.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::SpaceTraders.Api.Models.ShipReactor? Reactor { get; set; }
#nullable restore
#else
        public global::SpaceTraders.Api.Models.ShipReactor Reactor { get; set; }
#endif
        /// <summary>The supply level of a trade good.</summary>
        public global::SpaceTraders.Api.Models.SupplyLevel? Supply { get; set; }
        /// <summary>Type of ship</summary>
        public global::SpaceTraders.Api.Models.ShipType? Type { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::SpaceTraders.Api.Models.ShipyardShip"/> and sets the default values.
        /// </summary>
        public ShipyardShip()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::SpaceTraders.Api.Models.ShipyardShip"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::SpaceTraders.Api.Models.ShipyardShip CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::SpaceTraders.Api.Models.ShipyardShip();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "activity", n => { Activity = n.GetEnumValue<global::SpaceTraders.Api.Models.ActivityLevel>(); } },
                { "crew", n => { Crew = n.GetObjectValue<global::SpaceTraders.Api.Models.ShipyardShip_crew>(global::SpaceTraders.Api.Models.ShipyardShip_crew.CreateFromDiscriminatorValue); } },
                { "description", n => { Description = n.GetStringValue(); } },
                { "engine", n => { Engine = n.GetObjectValue<global::SpaceTraders.Api.Models.ShipEngine>(global::SpaceTraders.Api.Models.ShipEngine.CreateFromDiscriminatorValue); } },
                { "frame", n => { Frame = n.GetObjectValue<global::SpaceTraders.Api.Models.ShipFrame>(global::SpaceTraders.Api.Models.ShipFrame.CreateFromDiscriminatorValue); } },
                { "modules", n => { Modules = n.GetCollectionOfObjectValues<global::SpaceTraders.Api.Models.ShipModule>(global::SpaceTraders.Api.Models.ShipModule.CreateFromDiscriminatorValue)?.AsList(); } },
                { "mounts", n => { Mounts = n.GetCollectionOfObjectValues<global::SpaceTraders.Api.Models.ShipMount>(global::SpaceTraders.Api.Models.ShipMount.CreateFromDiscriminatorValue)?.AsList(); } },
                { "name", n => { Name = n.GetStringValue(); } },
                { "purchasePrice", n => { PurchasePrice = n.GetIntValue(); } },
                { "reactor", n => { Reactor = n.GetObjectValue<global::SpaceTraders.Api.Models.ShipReactor>(global::SpaceTraders.Api.Models.ShipReactor.CreateFromDiscriminatorValue); } },
                { "supply", n => { Supply = n.GetEnumValue<global::SpaceTraders.Api.Models.SupplyLevel>(); } },
                { "type", n => { Type = n.GetEnumValue<global::SpaceTraders.Api.Models.ShipType>(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteEnumValue<global::SpaceTraders.Api.Models.ActivityLevel>("activity", Activity);
            writer.WriteObjectValue<global::SpaceTraders.Api.Models.ShipyardShip_crew>("crew", Crew);
            writer.WriteStringValue("description", Description);
            writer.WriteObjectValue<global::SpaceTraders.Api.Models.ShipEngine>("engine", Engine);
            writer.WriteObjectValue<global::SpaceTraders.Api.Models.ShipFrame>("frame", Frame);
            writer.WriteCollectionOfObjectValues<global::SpaceTraders.Api.Models.ShipModule>("modules", Modules);
            writer.WriteCollectionOfObjectValues<global::SpaceTraders.Api.Models.ShipMount>("mounts", Mounts);
            writer.WriteStringValue("name", Name);
            writer.WriteIntValue("purchasePrice", PurchasePrice);
            writer.WriteObjectValue<global::SpaceTraders.Api.Models.ShipReactor>("reactor", Reactor);
            writer.WriteEnumValue<global::SpaceTraders.Api.Models.SupplyLevel>("supply", Supply);
            writer.WriteEnumValue<global::SpaceTraders.Api.Models.ShipType>("type", Type);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}

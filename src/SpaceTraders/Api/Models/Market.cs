// <auto-generated/>
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace SpaceTraders.Api.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.17.0")]
    #pragma warning disable CS1591
    public partial class Market : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The list of goods that are bought and sold between agents at this market.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::SpaceTraders.Api.Models.TradeGood>? Exchange { get; set; }
#nullable restore
#else
        public List<global::SpaceTraders.Api.Models.TradeGood> Exchange { get; set; }
#endif
        /// <summary>The list of goods that are exported from this market.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::SpaceTraders.Api.Models.TradeGood>? Exports { get; set; }
#nullable restore
#else
        public List<global::SpaceTraders.Api.Models.TradeGood> Exports { get; set; }
#endif
        /// <summary>The list of goods that are sought as imports in this market.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::SpaceTraders.Api.Models.TradeGood>? Imports { get; set; }
#nullable restore
#else
        public List<global::SpaceTraders.Api.Models.TradeGood> Imports { get; set; }
#endif
        /// <summary>The symbol of the market. The symbol is the same as the waypoint where the market is located.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Symbol { get; set; }
#nullable restore
#else
        public string Symbol { get; set; }
#endif
        /// <summary>The list of goods that are traded at this market. Visible only when a ship is present at the market.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::SpaceTraders.Api.Models.MarketTradeGood>? TradeGoods { get; set; }
#nullable restore
#else
        public List<global::SpaceTraders.Api.Models.MarketTradeGood> TradeGoods { get; set; }
#endif
        /// <summary>The list of recent transactions at this market. Visible only when a ship is present at the market.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::SpaceTraders.Api.Models.MarketTransaction>? Transactions { get; set; }
#nullable restore
#else
        public List<global::SpaceTraders.Api.Models.MarketTransaction> Transactions { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::SpaceTraders.Api.Models.Market"/> and sets the default values.
        /// </summary>
        public Market()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::SpaceTraders.Api.Models.Market"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::SpaceTraders.Api.Models.Market CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::SpaceTraders.Api.Models.Market();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "exchange", n => { Exchange = n.GetCollectionOfObjectValues<global::SpaceTraders.Api.Models.TradeGood>(global::SpaceTraders.Api.Models.TradeGood.CreateFromDiscriminatorValue)?.AsList(); } },
                { "exports", n => { Exports = n.GetCollectionOfObjectValues<global::SpaceTraders.Api.Models.TradeGood>(global::SpaceTraders.Api.Models.TradeGood.CreateFromDiscriminatorValue)?.AsList(); } },
                { "imports", n => { Imports = n.GetCollectionOfObjectValues<global::SpaceTraders.Api.Models.TradeGood>(global::SpaceTraders.Api.Models.TradeGood.CreateFromDiscriminatorValue)?.AsList(); } },
                { "symbol", n => { Symbol = n.GetStringValue(); } },
                { "tradeGoods", n => { TradeGoods = n.GetCollectionOfObjectValues<global::SpaceTraders.Api.Models.MarketTradeGood>(global::SpaceTraders.Api.Models.MarketTradeGood.CreateFromDiscriminatorValue)?.AsList(); } },
                { "transactions", n => { Transactions = n.GetCollectionOfObjectValues<global::SpaceTraders.Api.Models.MarketTransaction>(global::SpaceTraders.Api.Models.MarketTransaction.CreateFromDiscriminatorValue)?.AsList(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteCollectionOfObjectValues<global::SpaceTraders.Api.Models.TradeGood>("exchange", Exchange);
            writer.WriteCollectionOfObjectValues<global::SpaceTraders.Api.Models.TradeGood>("exports", Exports);
            writer.WriteCollectionOfObjectValues<global::SpaceTraders.Api.Models.TradeGood>("imports", Imports);
            writer.WriteStringValue("symbol", Symbol);
            writer.WriteCollectionOfObjectValues<global::SpaceTraders.Api.Models.MarketTradeGood>("tradeGoods", TradeGoods);
            writer.WriteCollectionOfObjectValues<global::SpaceTraders.Api.Models.MarketTransaction>("transactions", Transactions);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}

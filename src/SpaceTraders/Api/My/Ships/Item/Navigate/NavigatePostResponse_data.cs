// <auto-generated/>
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using SpaceTraders.Api.Models;
using System.Collections.Generic;
using System.IO;
using System;
namespace SpaceTraders.Api.My.Ships.Item.Navigate
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.17.0")]
    #pragma warning disable CS1591
    public partial class NavigatePostResponse_data : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The events property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::SpaceTraders.Api.Models.ShipConditionEvent>? Events { get; set; }
#nullable restore
#else
        public List<global::SpaceTraders.Api.Models.ShipConditionEvent> Events { get; set; }
#endif
        /// <summary>Details of the ship&apos;s fuel tanks including how much fuel was consumed during the last transit or action.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::SpaceTraders.Api.Models.ShipFuel? Fuel { get; set; }
#nullable restore
#else
        public global::SpaceTraders.Api.Models.ShipFuel Fuel { get; set; }
#endif
        /// <summary>The navigation information of the ship.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::SpaceTraders.Api.Models.ShipNav? Nav { get; set; }
#nullable restore
#else
        public global::SpaceTraders.Api.Models.ShipNav Nav { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::SpaceTraders.Api.My.Ships.Item.Navigate.NavigatePostResponse_data"/> and sets the default values.
        /// </summary>
        public NavigatePostResponse_data()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::SpaceTraders.Api.My.Ships.Item.Navigate.NavigatePostResponse_data"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::SpaceTraders.Api.My.Ships.Item.Navigate.NavigatePostResponse_data CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::SpaceTraders.Api.My.Ships.Item.Navigate.NavigatePostResponse_data();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "events", n => { Events = n.GetCollectionOfObjectValues<global::SpaceTraders.Api.Models.ShipConditionEvent>(global::SpaceTraders.Api.Models.ShipConditionEvent.CreateFromDiscriminatorValue)?.AsList(); } },
                { "fuel", n => { Fuel = n.GetObjectValue<global::SpaceTraders.Api.Models.ShipFuel>(global::SpaceTraders.Api.Models.ShipFuel.CreateFromDiscriminatorValue); } },
                { "nav", n => { Nav = n.GetObjectValue<global::SpaceTraders.Api.Models.ShipNav>(global::SpaceTraders.Api.Models.ShipNav.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteCollectionOfObjectValues<global::SpaceTraders.Api.Models.ShipConditionEvent>("events", Events);
            writer.WriteObjectValue<global::SpaceTraders.Api.Models.ShipFuel>("fuel", Fuel);
            writer.WriteObjectValue<global::SpaceTraders.Api.Models.ShipNav>("nav", Nav);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
